name: run-pipeline

on:
  push:
    tags:        
      - v*           
  pull_request:
    branches:
      - main
  workflow_run:
    workflows: [ "test-pipeline" ]
    types:
      - completed

env:
  imageName: img_system_logs
  containerName: ctr_system_logs

jobs:
  run-pipeline:
    runs-on: ubuntu-latest
    steps:

      - name: Checkout
        uses: actions/checkout@v2
    
      - uses: ahmadnassri/action-workflow-run-wait@v1
      
      - name: Set up Python 3.8.6
        uses: actions/setup-python@v2
        with:
          python-version: 3.8.6

      - name: Install pipenv for Python and other packages
        run: |
          sudo apt-get install zip gzip tar
          python -m pip install --upgrade pip
          python -m pip install pipenv

      - name: Create log-file in /var/log
        run: |
          sudo touch /var/log/dfcti_system_logs.log
          sudo chmod 777 /var/log/dfcti_system_logs.log
      
      - name: Install packages for log-writer script + give permission
        run: |
          cd log-writer
          pipenv install
          chmod +x dfcti_log_writer.py

      - name: Install packages for log-reader script + give permission
        run: |
          cd log-reader
          pipenv install
          chmod +x dfcti_log_reader.py

      - name: Smart script for writing and reading logs
        run: |
          cd log-reader
          sudo chmod 777 run.sh
          sudo chmod 777 stop.sh
          echo 'Starting the pipeline'
          ./run.sh
          echo 'Stopping the pipeline'
          ./stop.sh

      - name: Create release | Deliver log-file
        uses: softprops/action-gh-release@v1
        id: create_release
        if: startsWith(github.ref, 'refs/tags/')
        with:
          body_path: CHANGELOG.md
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Get release `url`
        id: get_release_url
        uses: bruceadams/get-release@v1.2.2
        env:
          GITHUB_TOKEN: ${{ github.token }}      

      - name: Create py-log-writer package
        run: |
          zip -r py_log_writer.zip log-writer
      
      - name: Create py-log-reader package
        run: |
          zip -r py_log_reader.zip log-reader

      - name: Upload py-log-writer artifact
        uses: actions/upload-release-asset@v1
        env:
           GITHUB_TOKEN: ${{ github.token }}
        with:
          asset_path: py_log_writer.zip
          asset_name: py_log_writer.zip
          asset_content_type: application/zip
          upload_url: ${{ steps.get_release_url.outputs.upload_url }}
      
      - name: Upload py-log-reader artifact
        uses: actions/upload-release-asset@v1
        env:
           GITHUB_TOKEN: ${{ github.token }}
        with:
          asset_path: py_log_reader.zip
          asset_name: py_log_reader.zip
          asset_content_type: application/zip
          upload_url: ${{ steps.get_release_url.outputs.upload_url }}