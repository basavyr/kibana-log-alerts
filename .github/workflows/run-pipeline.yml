name: Build-Logger

on:
  # push:
  #   tags:        
  #     - v*           
  # pull_request:
  #   branches:
  #     - main
  workflow_run:
    workflows: [ "Test-Logger" ]
    types:
      - completed

env:
  imageName: img_system_logs
  containerName: ctr_system_logs

jobs:
  run-pipeline:
    runs-on: ubuntu-latest
    steps:

      - name: Checkout
        uses: actions/checkout@v2
    
      - uses: ahmadnassri/action-workflow-run-wait@v1
      
      - name: Set up Python 3.8.6
        uses: actions/setup-python@v2
        with:
          python-version: 3.8.6

      - name: Install pipenv for Python and other packages
        run: |
          sudo apt-get install zip gzip tar
          python -m pip install --upgrade pip
          python -m pip install pipenv

      - name: Create log-file in /var/log
        run: |
          sudo touch /var/log/dfcti_system_logs.log
          sudo chmod 777 /var/log/dfcti_system_logs.log
      
      - name: Install packages for log-writer script + give permission
        run: |
          cd log-writer
          pipenv install
          chmod +x dfcti_log_writer.py

      - name: Install packages for log-reader script + give permission
        run: |
          cd log-reader
          pipenv install
          chmod +x dfcti_log_reader.py

      - name: Smart script for writing and reading logs
        run: |
          cd log-reader
          sudo chmod 777 run.sh
          sudo chmod 777 stop.sh
          echo 'Starting the pipeline'
          ./run.sh
          echo 'Stopping the pipeline'
          ./stop.sh
      
      - name: Install packages for creating archives
        run: sudo apt-get install zip gzip tar
      - name: Create archive with the source code
        run: |
          mkdir -p packaged_app
          cd packaged_app
          cp ../log-reader/dfcti_log_reader.py .
          cp ../log-reader/test_reader.py .
          cp ../log-reader/Pipfile .
          cp ../log-writer/dfcti_log_writer.py .
          cp ../log-writer/test_writer.py .
          cd ..
          zip -r packaged_app.zip packaged_app
      - name: Create artifact
        uses: actions/upload-artifact@v2
        with:
          name: packaged_app.zip
          path: packaged_app.zip
          if-no-files-found: warn